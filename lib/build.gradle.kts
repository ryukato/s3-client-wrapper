/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    create("integrationTest") {
        kotlin.srcDir("src/test-integration/kotlin")
        resources.srcDir("src/test-integration/resources")

        compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
        runtimeClasspath += output + compileClasspath
    }
}

task<Test>("integrationTest") {
    description = "Runs integration tests."
    group = "verification"

    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath
    shouldRunAfter("test")
    finalizedBy("jacocoTestReport")
}

dependencies {
    implementation(ExtLibs.kotlinStdlib)
    implementation(ExtLibs.kotlinReflect)
    implementation(ExtLibs.kotlinSerialization)
    implementation(ExtLibs.kotlinxCoroutinesCore)
    implementation(ExtLibs.kotlinxCoroutinesCoreJvm)
    implementation(ExtLibs.kotlinLogging)
    implementation(ExtLibs.s3)
    implementation(ExtLibs.commonIo)
    implementation(ExtLibs.minio)
    implementation(ExtLibs.okHttp)
    implementation(ExtLibs.okhttpLoggingInterceptor)

    runtimeOnly(ExtLibs.jasypt)

    testImplementation(ExtLibs.kotlinCoroutineTest)
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testImplementation(ExtLibs.testContainer)
    testImplementation(ExtLibs.testMinioTestContainer)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
